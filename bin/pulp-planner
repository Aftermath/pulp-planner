#!/usr/bin/env ruby
#
# Copyright 2016 Red Hat, Inc.
#
# This software is licensed to you under the GNU General Public
# License as published by the Free Software Foundation; either version
# 2 of the License (GPLv2) or (at your option) any later version.
# There is NO WARRANTY for this software, express or implied,
# including the implied warranties of MERCHANTABILITY,
# NON-INFRINGEMENT, or FITNESS FOR A PARTICULAR PURPOSE. You should
# have received a copy of GPLv2 along with this software; if not, see
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

# workaround for: https://github.com/grosser/fast_gettext/issues/32
Encoding.default_external='UTF-8' if RUBY_VERSION >= '1.9'

APP_NAME = 'pulp-planner'
LIB_PREFIX = "#{Dir.pwd}/../lib"

require 'logger'
require 'optparse'
require 'openssl'
require 'find'
require 'net/http'
require 'net/https'

require "#{LIB_PREFIX}/manifest_reader.rb"
require "#{LIB_PREFIX}/disconnected_pulp.rb"
require "#{LIB_PREFIX}/filesize.rb"

LOG = Logger.new(STDOUT) 
LOG.level =  Logger::WARN

module Rails; end 

CONFIG_DIR = File.expand_path "~/.#{APP_NAME}"
CONFIG = YAML::load_file(CONFIG_DIR + "/config.yml") rescue {}

DEFAULT_CDNURL = 'https://cdn.redhat.com'
DEFAULT_CDNCA='/etc/rhsm/ca/redhat-uep.pem'

options = {}

subtext = ('Possible commands are:') + "\n\n" +
'     ' + ('import           import a manifest') + "\n" +
'     ' + ('list             list all or enabled repositories') + "\n" +
'     ' + ('enable           enable particular repository or all repos') + "\n" +
'     ' + ('disable          disable particular repository or all repos') + "\n" +
'     ' + ('run              get total space required for enabled repos') + "\n" +
'     ' + ('refresh          redownload repository information from CDN') + "\n" +
'     ' + ('info             print (debugging) manifest information') + "\n" +
('Typical workflow: import, edit repos.conf, run.') + "\n" +
('See pulp-planner COMMAND --help" for more information on a specific') + "\n" +
('command.')

global = OptionParser.new do |opts|
  opts.banner = ("Usage: pulp-planner [subcommand [options]]") +
                "\n\n" + ("Global options:")

  opts.on( '-d', '--debug', ('Print debugging information') ) do
    LOG.level = Logger::DEBUG
  end
  opts.on( '-h', '--help', ('Display this screen') ) do
    puts opts
    exit
  end
  opts.separator ""
  opts.separator subtext
end

options[:cdn_url] = DEFAULT_CDNURL
options[:cdn_ca] = DEFAULT_CDNCA
subcommands = {
  'import' => OptionParser.new do |opts|
    opts.banner = ("Usage:") + " " + ('import [--manifest MANIFEST]')
    opts.on( '-m', '--manifest MANIFEST', ('Manifest to import - required') ) do |manifest|
      abort"Provide a valid file: #{manifest}" if not File.exists? manifest
      options[:manifest] = manifest
    end
    opts.on( '-u', '--cdnurl URL', ("Base CDN URL (%s)") % DEFAULT_CDNURL ) do |value|
      options[:cdn_url] = value
    end
    opts.on( '-a', '--cdnca FILE', ("CDN CA file (%s)") % DEFAULT_CDNCA ) do |value|
      abort"Provide a valid file: #{value}" if not File.exists? value
      options[:cdn_ca] = value
    end
  end,
  'refresh' => OptionParser.new do |opts|
    opts.banner = ("Usage:") + " " + ('refresh')
    opts.on( '-a', '--cdnca FILE', ("CDN CA file (%s)") % DEFAULT_CDNCA ) do |value|
      abort"Provide a valid file: #{value}" if not File.exists? value
      options[:cdn_ca] = value
    end
  end,
  'info' => OptionParser.new do |opts|
    opts.banner = ("Usage:") + " " + ('info')
  end,
  'list' => OptionParser.new do |opts|
    opts.banner = ("Usage:") + " " + ('list [--disabled]')
    opts.on( '-s', '--disabled', ('List also disabled repositories') ) do
      options[:disabled] = true
    end
  end,
  'enable' => OptionParser.new do |opts|
    opts.banner = ("Usage:") + " " + ('enable [-r repoid1,repoid2...] [--all]')
    opts.on( '-r', '--repos REPOS', ('Repository ids to enable') ) do |value|
      options[:repos] = value
    end
    opts.on( '-a', '--all', ('Enable all repositories') ) do
      options[:all] = true
    end
  end,
  'disable' => OptionParser.new do |opts|
    opts.banner = ("Usage:") + " " + ('disable [-r repoid1,repoid2...] [--all]')
    opts.on( '-r', '--repos REPOS', ('Repository ids to disable') ) do |value|
      options[:repos] = value
    end
    opts.on( '-a', '--all', ('Disable all repositories') ) do
      options[:all] = true
    end
  end,
  'run' => OptionParser.new do |opts|
    opts.banner = ("Usage:") + " " + ('run')
  end,
}

begin
  global.order!
  command = ARGV.shift || abort(global.help)
  subcommands[command].order! if subcommands[command]
rescue OptionParser::InvalidOption => e
  abort(e.message)
end

# ActiveManifest class represent current manifest file which is stored in user's home
# directory as manifest.bin. Basically it is a ZIP manifest enriched with repositories
# which has been fetched from CDN during import. Also this class provides access to
# repository state (enabled/disabled) which is stored in the same directory in the
# repos.conf file.
#
class ActiveManifest
  attr_accessor :manifest
  attr_accessor :active_dir, :import_dir
  attr_accessor :manifest_filename, :repos_conf_filename
  attr_accessor :cdn_url, :cdn_ca

  def initialize options={}
    prepare_config_dir
    @cdn_url = options[:cdn_url]
    @cdn_ca = options[:cdn_ca]
    load_existing
  end

  def prepare_config_dir
    if not File.directory?(CONFIG_DIR)
      Dir.mkdir(CONFIG_DIR, 0700)
    end
    @manifest_filename = File.join(CONFIG_DIR, 'manifest.bin')
    @repos_conf_filename = File.join(CONFIG_DIR, 'repos.conf')
  end

  def load_existing
    if File.exists?(manifest_filename)
      @manifest = ManifestReader::Manifest.load manifest_filename, repos_conf_filename
      LOG.debug ("Existing manifest %s loaded") % @manifest.created
    end
  end

  def import manifest_file, cdnca_file, proxy_host = nil, proxy_port = nil, proxy_user = nil, proxy_password = nil
    # import basic manifest
    abort("Please provide a manifest using --manifest option") if manifest_file.nil?
    abort("Unable to read file %s, specify --cdnca option") % cdnca_file unless File.exist? cdnca_file
    imanifest = ManifestReader::Manifest.new manifest_file, cdn_url, cdn_ca, proxy_host, proxy_port, proxy_user, proxy_password

    # populate repositories
    total_repos = imanifest.populate_repositories
    LOG.debug ("Total repositories found: %s") % total_repos


    # Add pre-defined puppet forge


    # import successful - move to active
    @manifest = imanifest
    save
  end

  def refresh cdnca_file
    unless File.exist? cdnca_file
      abort("Unable to read file %s, specify --cdnca option") % cdnca_file
    end
    total_repos = @manifest.populate_repositories
    LOG.debug ("Total repositories found: %s") % total_repos
    save
  end

  def save
    @manifest.save manifest_filename, repos_conf_filename
  end

  def save_repo_conf
    LOG.debug ("Saving repos to %s") % repos_conf_filename
    manifest.save_repo_conf repos_conf_filename
  end

  def print_info
    manifest.print_info
  end
end

active_manifest = ActiveManifest.new options
if command == 'import'
  active_manifest.import options[:manifest], options[:cdn_ca]
elsif command == 'refresh'
  active_manifest.refresh options[:cdn_ca]
elsif command == 'info'
  active_manifest.print_info
elsif command == 'list'
  pulp = DisconnectedPulp.new active_manifest, options, LOG
  puts ("Red Hat Repositories\n")
  pulp.list options[:disabled]
elsif command == 'enable'
  pulp = DisconnectedPulp.new active_manifest, options, LOG
  pulp.enable true, options[:repos], options[:all]
elsif command == 'disable'
  pulp = DisconnectedPulp.new active_manifest, options, LOG
  pulp.enable false, options[:repos], options[:all]
elsif command == 'run'
  pulp = DisconnectedPulp.new active_manifest, options, LOG
  pulp.run
else
  abort('Unknown action, use -h or --help.')
end
